const express = require('express');
const fs = require('fs');
const path = require('path');
const app = express();
app.use(express.json());

const registryPath = path.resolve(__dirname, 'registry.json');

const loadRegistry = () => {
  if (!fs.existsSync(registryPath)) return {};
  return JSON.parse(fs.readFileSync(registryPath, 'utf-8'));
};

const saveRegistry = (data) => {
  fs.writeFileSync(registryPath, JSON.stringify(data, null, 2));
};

app.post('/register', (req, res) => {
  const { serviceName, host, port, basePath } = req.body;
  if (!serviceName || !host || !port || !basePath) {
    return res.status(400).json({ message: 'Missing required fields' });
  }
  const registry = loadRegistry();
  registry[serviceName] = { host, port, basePath };
  saveRegistry(registry);
  console.log(`✅ Registered: ${serviceName}`);
  res.json({ message: `${serviceName} registered` });
});

app.listen(5000, () => console.log('📘 Registry running on http://localhost:5000'));


----------------

const express = require('express');
const fs = require('fs');
const path = require('path');
const { createProxyMiddleware } = require('http-proxy-middleware');

const app = express();
const PORT = 3000;
const registryPath = path.resolve(__dirname, '../registry/registry.json');

function getServiceInfo(basePath) {
  const registry = JSON.parse(fs.readFileSync(registryPath, 'utf-8'));
  return Object.values(registry).find(service => service.basePath === basePath);
}

app.use((req, res, next) => {
  const basePath = '/' + req.url.split('/')[1];
  const service = getServiceInfo(basePath);

  if (!service) {
    return res.status(502).json({ error: `Service not found for ${basePath}` });
  }

  const target = `http://${service.host}:${service.port}`;
  console.log(`🔁 Proxying ${req.url} → ${target}`);
  createProxyMiddleware({
    target,
    changeOrigin: true,
    pathRewrite: { [`^${service.basePath}`]: '' },
  })(req, res, next);
});

app.listen(PORT, () => {
  console.log(`🚪 API Gateway running on http://localhost:${PORT}`);
});
